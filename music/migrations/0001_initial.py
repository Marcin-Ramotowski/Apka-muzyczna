# Generated by Django 4.1.5 on 2023-01-30 20:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Uzytkownik',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('account_type', models.CharField(choices=[('FR', 'free'), ('PR', 'premium')], default='free', max_length=7)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'uzytkownik',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('album_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tytul', models.CharField(max_length=50)),
                ('rok_wydania', models.SmallIntegerField()),
                ('wiecej_info', models.TextField()),
            ],
            options={
                'db_table': 'album',
            },
        ),
        migrations.CreateModel(
            name='Autor',
            fields=[
                ('autor_id', models.IntegerField(primary_key=True, serialize=False)),
                ('imie', models.CharField(max_length=30)),
                ('nazwisko', models.CharField(max_length=50)),
                ('pseudonim', models.CharField(max_length=40)),
                ('wiecej_info', models.TextField()),
            ],
            options={
                'db_table': 'autor',
            },
        ),
        migrations.CreateModel(
            name='Utwor',
            fields=[
                ('utwor_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tytul', models.CharField(max_length=60)),
                ('gatunek', models.CharField(max_length=30)),
                ('dlugosc', models.TimeField()),
                ('plik_sciezka', models.CharField(max_length=60)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs_in_album', to='music.album')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs_by_autor', to='music.autor')),
            ],
            options={
                'db_table': 'utwor',
            },
        ),
        migrations.CreateModel(
            name='Subskrypcja',
            fields=[
                ('subskrypcja_id', models.IntegerField(primary_key=True, serialize=False)),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions_author', to='music.autor')),
                ('uzytkownik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'subskrypcja',
            },
        ),
        migrations.CreateModel(
            name='Playlista',
            fields=[
                ('playlista_id', models.IntegerField(primary_key=True, serialize=False)),
                ('nazwa', models.CharField(max_length=100)),
                ('uzytkownik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'playlista',
            },
        ),
        migrations.CreateModel(
            name='BibliotekaPlaylist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('playlista', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs_in_playlist', to='music.playlista')),
                ('utwor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists_with_song', to='music.utwor')),
            ],
            options={
                'db_table': 'playlista_utwor',
            },
        ),
        migrations.CreateModel(
            name='BibliotekaPiosenek',
            fields=[
                ('library_song_id', models.IntegerField(primary_key=True, serialize=False)),
                ('utwor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs_in_library', to='music.utwor')),
                ('uzytkownik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_song_library', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'biblioteka_piosenki',
            },
        ),
        migrations.CreateModel(
            name='BibliotekaAlbumow',
            fields=[
                ('library_album_id', models.IntegerField(primary_key=True, serialize=False)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='albums_in_library', to='music.album')),
                ('uzytkownik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_album_library', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'biblioteka_albumy',
            },
        ),
        migrations.AddField(
            model_name='album',
            name='autor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='albums_by_autor', to='music.autor'),
        ),
    ]
